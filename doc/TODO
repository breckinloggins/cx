[X] Type in toypasc compiler example
[X] Change up a few tokens like Begin and End to make it more C-like
[X] Add command line options
[X]	Add pass-through compilation
[X]	Change grammar to put parenthesis around things that require parenthesis in C
[X]	BUG: variables aren't recognized as their types
[X]	Modify Var declaration to be C-like instead of pascal-like
[X]	Rename ProgramDecl to NamespaceDecl
[X]	Add // style comment
[X]	Rename Program rule to TranslationUnit
[X] BUG: only one variable gets translated in the vardecl_list
[X]	Add float and double types
[X]	BUG: last statement can't have a semicolon
[X]	Remove distinction between procedures and functions
[X]	BUG: compiler doesn't actually return the right value from a function
[X] Add return statement
[X]	BUG: functions cannot be called
[X]	Move to C-style function declaration syntax
[X]	Add a readChar() statement to make things more interesting
[X]	Remove ProgramBody element.  Programs will need to explicitly declare a main function
[X]	First pass for dropping to other languages with a _<language>_ {} syntax.  Start with _C_ { fprintf("hi!"); } and
	directly output with the code generator
[X]	Create GitHub repository
[X]	Collect all the feature specs from various sources, clean up, put in FEATURES document
[]	BUG: statements are inserted into the AST backward
[]	BUG: readChar() should be an expression, not a statement
[]	BUG: Functions are allowed to not have the right return type as the last statement
[]	BUG: function parameters aren't supported and are still Pascal syntax
[]	BUG: access modifiers on function declarations should be optional
[]	When generating C code, append namespace to variables and functions
[]	Rename base types to C-type names
[]	Add Flex/Bison support to CMake file
[]	Parse the input file name to create good output intermediate and executable names
[]	Allow declaration of vars inside a statement block
[]  Add feature where type of last expression in function will be the return value of
	that function
[]	Add hexadecimal and octal literals
[]	Add a string type/string literals
[]	Add array type
[]	Add struct type
[]	Add class type
[]	Add enum type
[]	Add a temporary getLine statement
[]	Test and fix issues with if statments/for loops/while loops
	[] BUG: if statement doesn't allow blocks
	[] BUG: Grammar has insane complexity on if/then statements
[]	Add bitwise operators
[]	Add ternary operator
[]	Add do/while
[]	Add break/continue statements
[]	Add switch statement
[]	Add goto/labels
[]	Add support for IEEE floating point notation (e notation)
[]  Add support for symbols (: syntax)
[]	Add support for named parameters (parameterName = value syntax)
[]	Allow declarations and statements to be intermingled
[]	Replace built in I/O statements with a standard environment
[]	Add more test files and create a testing framework with CMake/CTest
[]	Add /// comment that clings to closest program unit
[]	Define standard ABI, C-macros, etc.
[]	Define way to expose a C function interface manually.
		// Define C convenience function
		"C" string accessFoo()	{ // Do some Cx stuff here.  C caller will see the return as an ARRAY struct }
[]	Rewrite README to be more public-oriented